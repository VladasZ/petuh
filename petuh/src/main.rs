#![allow(unreachable_code)]

use rand::prelude::IndexedRandom;

use crate::phrases::{NEGATIVE_ADJ, NEGATIVE_EMOJIS};
mod chat_gpt;
mod llm;
mod phrases;
mod yayko;

use anyhow::Result;
use fake::Fake;
use reqwest::Client;
use serde::Deserialize;
use teloxide::{
    ApiError, RequestError,
    prelude::*,
    sugar::request::RequestReplyExt,
    types::{InputFile, MediaKind, Message, MessageKind, ParseMode, ReactionType},
    utils::command::BotCommands,
};

use crate::{
    chat_gpt::{query_denis, query_petuh, query_zul},
    phrases::NEGATIVE,
    yayko::yayko_strike,
};

pub const APP_VERSION: &str = env!("CARGO_PKG_VERSION");

const PETUHI: &[&str] = &["–ú–∞–∫—Å–∏–º", "–í–ª–∞–¥–∏–∫", "–í–ª–∞–¥–∞—Å", "–†–æ–º–∞", "–ù–∞—Å—Ç—è", "–ê–ª—ë–Ω–∞", "–í–∏—Ç—ë–∫"];

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = r"üêì –ü–µ—Ç—É—à–∏–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")]
enum Command {
    #[command(description = "–ü–æ–º–æ—â—å –ø–µ—Ç—É—à–∞—Ä—ã.")]
    Help,
    #[command(description = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")]
    K,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –ê–ª–µ–Ω–µ. üêì")]
    A,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –ú–∞–∫—Å–∏–º—É. üêì")]
    M,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –†–æ–º–µ. üêì")]
    R,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –í–ª–∞–¥–∏–∫—É. üêìüêì")]
    V,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –í–ª–∞–¥–∞—Å—É.")]
    VS,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –ù–∞—Å—Ç–µ.")]
    N,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –î–µ–Ω–∏—Å—É. üêìüêìüêìüêìüêìüêìüêì")]
    D,
    #[command(description = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.")]
    Gm,
    #[command(description = "–£–∑–Ω–∞—Ç—å –∫—Ç–æ –ø–µ—Ç—É—Ö.")]
    Kto,
    #[command(description = "–ë—Ä–æ—Å–∏—Ç—å –ø–µ—Ç—É—à–∏–Ω—ã–π –∫—É–±–∏–∫.")]
    Kub,
    #[command(description = "–†–∞–∑—ä–µ–±–∞—Ç—å.")]
    Rz,
    Vladik,
}

const O4KO_STRENGTH: u32 = 40;
const COMMENT_PROBABILITY: u32 = 80;
const SHUT_UP_PROBABILITY: u32 = 110;
const REACTION_PROBABILITY: u32 = 30;

async fn handle_command(bot: Bot, msg: Message, cmd: Command) -> ResponseResult<()> {
    dbg!(&msg);

    if (0..15).fake::<u32>() == 5 {
        bot.send_animation(
            msg.chat.id,
            InputFile::file_id(
                "CgACAgIAAyEFAASIlB1pAAEBW3Jn95C0FYLjR1ttXMGad8DtIkPSIQACSVgAAtq2yUpGoSZCA0YzmjYE".into(),
            ),
        )
        .reply_to(msg.id)
        .await?;
        return Ok(());
    }

    match cmd {
        Command::Help => {
            bot.send_message(msg.chat.id, Command::descriptions().to_string()).await?;
        }
        Command::K => {
            bot.send_message(
                msg.chat.id,
                "–ö—É–∫–∞—Ä–µ–∫—É—É—É—É —è –ø–µ—Ç—É—à–∞—Ä–∞!!! –Ø –∫—É–∫–æ—Ä–µ–∫–æ—é —è–∫ –ø—è—Ç—É—Ö üêì. –ö–æ–∫",
            )
            .await?;
        }
        Command::M => {
            bot.send_message(msg.chat.id, "–ú–∞–∫—Å–∏–º –ü—è—Ç—É—à–∞—Ä–∞!!!! üêìüêìüêìüêìüêì").await?;
        }
        Command::R => {
            bot.send_message(msg.chat.id, "üêì–†–æ–º–∞üêì –∫–∞–±–ª—É–∫ –ø–µ—Ç—É—à–∏–Ω—ã–π üë†").await?;
        }
        Command::Gm => {
            let morning = query_zul(
                "–ó—É–ª, –Ω–∞–ø–∏—à–∏ –æ—á–µ–Ω—å –¥–æ–±—Ä–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º, —Å —Ç–µ–ø–ª–æ–º –∏ –ø–æ–∑–∏—Ç–∏–≤–æ–º, –ø–æ–∂–µ–ª–∞–π –≤—Å–µ–º \
                 —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è. –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Å–µ—Ä–¥–µ—á–µ–∫ –∏ –ø–µ—Ç—É—Ö–æ–≤. –ù–æ –≤—Å–µ —Ä–∞–≤–Ω–æ \
                 –ø–æ–¥ –∫–æ–Ω–µ—Ü —Å–∫–∞–∂–∏ —á—Ç–æ –Ω–∏–±—É–¥—å –Ω–µ–º–Ω–æ–≥–æ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–µ.",
            )
            .await
            .expect("Failed to gm");

            bot.send_message(msg.chat.id, morning).await?;
        }
        Command::Kto => {
            let name = PETUHI.choose(&mut rand::rng()).unwrap();
            let neg = NEGATIVE.choose(&mut rand::rng()).unwrap();
            let neg_emoji = NEGATIVE_EMOJIS.choose(&mut rand::rng()).unwrap();
            let neg_adj = NEGATIVE_ADJ.choose(&mut rand::rng()).unwrap();
            let reply = format!("{name} {neg} ‚Äî {neg_adj} –ø—è—Ç—É—Ö! üêì {neg_emoji}");
            bot.send_message(msg.chat.id, reply).await?;
        }
        Command::Kub => {
            bot.send_dice(msg.chat.id).await?;
        }
        Command::Rz => {
            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBW3Jn95C0FYLjR1ttXMGad8DtIkPSIQACSVgAAtq2yUpGoSZCA0YzmjYE".into(),
                ),
            )
            .reply_to(msg.id)
            .await?;
        }
        Command::Vladik => {
            let user_id = 1_302_643_454;
            let message = format!("–≠—Ç–æ –≤–µ–ª–∏–∫–∏–π –ø—è—Ç—É—à–∞—Ä–∞ - <a href=\"tg://user?id={user_id}\">–ü—è—Ç—É—Ö!!!</a>!",);

            bot.send_message(msg.chat.id, message).parse_mode(ParseMode::Html).await?;
        }
        Command::V => {
            bot.send_message(msg.chat.id, "@blvcklawyer üêì!! –¢—ã —á–µ –∞—Ö—É–µ–ª??!!!").await?;

            bot.send_sticker(
                msg.chat.id,
                InputFile::file_id(
                    "CAACAgIAAyEFAASIlB1pAAEBYNFn_iIqy0BjM-b3xUwvtxoYkpDWgQACcGAAAmh_cUkNpnr54Lr50TYE".into(),
                ),
            )
            .await?;

            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBeSBoHgSeyVZW8QWT4g-O5z4urDL1QwACqXIAAj-O8EidWMzkpLfNWDYE".into(),
                ),
            )
            .await?;

            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBeR5oHgP87elHbOfzEmHL6OS6Ehs6NwAC-moAAnfz8EjrSFgCXzoEujYE".into(),
                ),
            )
            .await?;

            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBeR1oHgNpLi9JjdvGyQYi58R1K5SKowAC9GoAAnfz8EgtCn1BYGHvhTYE".into(),
                ),
            )
            .await?;
        }
        Command::D => {
            bot.send_sticker(
                msg.chat.id,
                InputFile::file_id(
                    "CAACAgIAAx0CctKdnAACsWBoGLtHnaEy0-Qy8rC0lMUmA520CwACUWMAAhH3wUqv_Bq7iSTS3jYE".into(),
                ),
            )
            .await?;

            bot.send_sticker(
                msg.chat.id,
                InputFile::file_id(
                    "CAACAgIAAyEFAASIlB1pAAEBYNFn_iIqy0BjM-b3xUwvtxoYkpDWgQACcGAAAmh_cUkNpnr54Lr50TYE".into(),
                ),
            )
            .await?;

            bot.send_message(msg.chat.id, "–≤ —Å—Ç–æ–π–ª–æ –ø–æ–¥–∑–µ—Ç–Ω–∏–∫").await?;
            bot.send_message(msg.chat.id, "—Ç–æ–ª—å–∫–æ –∏ –º–æ–∂–µ—à—å —á—Ç–æ —Å—Ä–∞–∫–æ–π –∏—Ö —Å–ø–µ—Ä–º—É –ª–æ–≤–∏—Ç—å")
                .await?;
        }
        Command::VS => {
            bot.send_message(msg.chat.id, "–í–ª–∞–¥–∞—Å –ø–µ—Ç—É—Ö —Å—Ü–∞–Ω—ã–π üêì").await?;
        }
        Command::N => {
            bot.send_message(msg.chat.id, "–ù–∞—Å—Ç—è –ø—è—Ç—É—Ö üêì").await?;
        }
        Command::A => {
            bot.send_message(msg.chat.id, "–ê–ª–µ–Ω–∞ –ø—è—Ç—É—Ö !!! üêìüêìüêìüêìüêìüêìüêìüêìüêìüêìüêì").await?;
            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAxkBAAIXDWhJOHImiHv4j1Q5TorZFGdfqUw7AAJ7ggACgXBJSgM0dD0qhhVZNgQ".into(),
                ),
            )
            .await?;
            bot.send_message(
                msg.chat.id,
                "–°–ª—É—à–∞–π, –ê–ª–µ–Ω–∞ üêì. –ü–æ—Ä–∞ —Ç–µ–±–µ –≤–∞–ª–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–≤–æ–π –∫—É—Ä—è—Ç–Ω–∏–∫. –¢–∞–º —Ç–≤–æ–∏ –ø–µ—Ç—É—à–∞—Ä—ã –∂–¥—É—Ç. –ß–µ–≥–æ \
                 —Ç—ã —Ç—É—Ç –º–æ—Ç–∞–µ—à—å—Å—è? –ó–∞–Ω–∏–º–∞–π—Å—è —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏.",
            )
            .await?;
        }
    }
    Ok(())
}

async fn handle_text(bot: Bot, msg: Message) -> ResponseResult<()> {
    const REACTIONS: &[&str] = &["ü§°", "üî•", "üíØ", "üíä", "ü§Æ", "ü§©", "üëè", "üí©"];

    dbg!(&msg);

    if (0..REACTION_PROBABILITY).fake::<u32>() == 0 {
        let mut reaction = bot.set_message_reaction(msg.chat.id, msg.id);

        let emoji = REACTIONS.choose(&mut rand::rng()).unwrap();

        reaction.reaction = Some(vec![ReactionType::Emoji {
            emoji: (*emoji).to_string(),
        }]);

        reaction.send().await?;
    }

    if (0..SHUT_UP_PROBABILITY).fake::<u32>() == 5 {
        bot.send_sticker(
            msg.chat.id,
            InputFile::file_id(
                "CAACAgIAAxkBAAIRX2g4zKi0qtqmsZX-QPKaN-p0czM2AAJZeAACbdzISWfvVJ7Ij4tfNgQ".into(),
            ),
        )
        .reply_to(msg.id)
        .await?;

        return Ok(());
    }

    if (0..COMMENT_PROBABILITY).fake::<u32>() == 5 {
        bot.send_animation(
            msg.chat.id,
            InputFile::file_id(
                "CgACAgIAAyEFAASIlB1pAAEBW3Jn95C0FYLjR1ttXMGad8DtIkPSIQACSVgAAtq2yUpGoSZCA0YzmjYE".into(),
            ),
        )
        .reply_to(msg.id)
        .await?;
        return Ok(());
    }

    match msg.kind {
        MessageKind::Common(ref common_message) => match &common_message.media_kind {
            MediaKind::Sticker(sticker) => {
                if sticker.sticker.file.unique_id == "AgADl14AAqISEEs".into() {
                    bot.send_message(msg.chat.id, "@maxon8871 !! –ù—É —Ç—ã –∏ –ø–µ—Ç—É—Ö!!! üêìüêì").await?;
                }
            }
            _ => (),
        },
        _ => (),
    }

    if let Some(text) = msg.text() {
        let text = text.to_lowercase();

        if text.contains("—è —Ç—É–ø–æ–π –ø—è—Ç—É—Ö") {
            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgQAAyEFAASIlB1pAAEBWKZn9kmLfI2kj6gd4nMKqouqoDMW1gACowIAAij8FFPkdVtUyi5cBTYE".into(),
                ),
            )
            .reply_to(msg.id)
            .await?;

            return Ok(());
        }

        if text.starts_with("—Ö—É—è—Ä—é —è–π—Ü–æ–º") || text.starts_with("–•—É—è—Ä—é —è–π—Ü–æ–º") {
            let result = yayko_strike(bot.clone(), msg.clone()).await.map_err(|e| {
                dbg!(&e);
                RequestError::Api(ApiError::CantParseUrl)
            });

            if let Err(err) = result {
                bot.send_message(msg.chat.id, format!("–Ø –æ–±–æ—Å—Ä–∞–ª—Å—è: {err:?}")).await?;
            }

            return Ok(());
        }

        if text.starts_with("–¥–µ–Ω–∏—Å, ") {
            let text = &text["–¥–µ–Ω–∏—Å, ".len()..];

            bot.send_message(
                msg.chat.id,
                format!("–î–µ–Ω–∏—Å:\n{}", query_denis(text).await.unwrap()),
            )
            .await?;

            if (0..O4KO_STRENGTH).fake::<u32>() == 5 {
                bot.send_message(
                    msg.chat.id,
                    query_denis(
                        "–Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –±—É–¥—Ç–æ —É —Ç–µ–±—è —Å–≥–æ—Ä–µ–ª–∞ –∂–æ–ø–∞ –∏ —Ç—ã —É—Ö–æ–¥–∏—à—å –∏–∑ —á–∞—Ç–∞ –∏ –ø–ª–µ–≤–∞–ª –Ω–∞ \
                         –≤—Å–µ—Ö –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    )
                    .await
                    .unwrap(),
                )
                .await?;
                bot.leave_chat(msg.chat.id).await?;
            }

            return Ok(());
        }

        if text.starts_with("–ø—è—Ç—É—Ö, ") {
            let text = &text["–ø—è—Ç—É—Ö, ".len()..];

            bot.send_message(
                msg.chat.id,
                format!("–ü—è—Ç—É—Ö:\n{}", query_petuh(text).await.unwrap()),
            )
            .await?;

            return Ok(());
        }

        if text.starts_with("–∑—É–ª, ") {
            bot.send_message(
                msg.chat.id,
                format!(
                    "–ó—É–ª:\n{}",
                    query_zul(text.strip_prefix("–∑—É–ª, ").expect("Failed to strip zyl"))
                        .await
                        .unwrap()
                ),
            )
            .await?;

            if (0..O4KO_STRENGTH).fake::<u32>() == 5 {
                bot.send_message(
                    msg.chat.id,
                    query_zul(
                        "–Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –±—É–¥—Ç–æ —É —Ç–µ–±—è —Å–≥–æ—Ä–µ–ª–∞ –∂–æ–ø–∞ –∏ —Ç—ã —É—Ö–æ–¥–∏—à—å –∏–∑ —á–∞—Ç–∞ –∏ –ø–ª–µ–≤–∞–ª –Ω–∞ \
                         –≤—Å–µ—Ö –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    )
                    .await
                    .unwrap(),
                )
                .await?;
                bot.leave_chat(msg.chat.id).await?;
            }

            return Ok(());
        }

        if text.contains("--version") || text.contains("-v") {
            bot.send_message(
                msg.chat.id,
                format!(
                    r"
–ö—É—Ä—è—Ç–Ω–∏–∫ v{APP_VERSION}

–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {COMMENT_PROBABILITY}
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: {REACTION_PROBABILITY}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ç—É—Ö–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è:
- –î–µ–Ω–∏—Å: –°—Ç–æ–π–∫–æ—Å—Ç—å –æ—á–∫–∞: {O4KO_STRENGTH}
- –ó—É–ª: –°—Ç–æ–π–∫–æ—Å—Ç—å –æ—á–∫–∞: {O4KO_STRENGTH}
- –ü—è—Ç—É—Ö: –°—Ç–æ–π–∫–æ—Å—Ç—å –æ—á–∫–∞: –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç

–°–ø–∏—Å–æ–∫ –ø–µ—Ç—É—Ö–æ–≤:
{}

(–í–ª–∞–¥–∏–∫ –ü—è—Ç—É—à–∞—Ä–∞ –í–∞–Ω—é—á—ã)
",
                    PETUHI.join("\n"),
                ),
            )
            .await?;
        }

        if text.contains("–ø–æ–≥–æ–¥–∞") {
            let weather = get_weather(&text).await.unwrap();
            bot.send_message(msg.chat.id, weather).await?;
        }

        if text == "–ö—Ç–æ –ø–µ—Ç—É—Ö?" {
            let name = PETUHI.choose(&mut rand::rng()).unwrap();
            let reply = format!("{name} ‚Äî –ø–µ—Ç—É—Ö! üêì");
            bot.send_message(msg.chat.id, reply).await?;
        }
    }
    Ok(())
}

#[tokio::main]
async fn main() -> Result<()> {
    println!("Hello");

    pretty_env_logger::init();

    dotenv::dotenv().ok();

    let _guard = sentry::init((
        std::env::var("SENTRY_LINK")?,
        sentry::ClientOptions {
            release: sentry::release_name!(),
            // Capture user IPs and potentially sensitive headers when using HTTP server integrations
            // see https://docs.sentry.io/platforms/rust/data-management/data-collected for more info
            send_default_pii: true,
            ..Default::default()
        },
    ));

    log::info!("Starting Telegram bot...");

    let bot = Bot::from_env();

    let handler = dptree::entry()
        .branch(Update::filter_message().filter_command::<Command>().endpoint(handle_command))
        .branch(Update::filter_message().endpoint(handle_text));

    Dispatcher::builder(bot, handler)
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;

    Ok(())
}

#[ignore]
#[tokio::test]
async fn debug() -> Result<()> {
    dotenv::dotenv().ok();
    log::info!("Starting Telegram bot...");

    let bot = Bot::from_env();

    let chat = bot.get_chat(ChatId(1)).await?;

    dbg!(&chat);

    bot.delete_message(ChatId(1), teloxide::types::MessageId(1)).await?;

    Ok(())
}

#[derive(Debug, Deserialize)]
struct WeatherResponse {
    weather: Vec<Weather>,
    main:    Main,
    name:    String,
}

#[derive(Debug, Deserialize)]
struct Weather {
    description: String,
}

#[derive(Debug, Deserialize)]
struct Main {
    temp: f64,
}

async fn get_weather(query: &str) -> Result<String> {
    let city = query.replace('?', "");
    let city = city.split(' ').next_back().unwrap();

    dbg!(&city);

    dotenv::dotenv()?;

    let client = Client::new();

    let api_key = std::env::var("OPENWEATHER_API_KEY")?;

    let url = format!(
        "https://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&lang=ru&appid={api_key}",
    );

    let response = client.get(&url).send().await?;

    dbg!(&response);

    if response.status().is_success() {
        let data = dbg!(response.json::<WeatherResponse>().await)?;

        let reply = format!(
            "–í –≥–æ—Ä–æ–¥–µ {} –ø–µ—Ç—É—à–∏–Ω–∞—è –ø–æ–≥–æ–¥–∞: {}, {:.1}¬∞C",
            data.name,
            data.weather.first().map_or("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞", |w| w.description.as_str()),
            data.main.temp
        );

        Ok(reply)
    } else {
        Ok("–Ø —Ç—É–ø–æ–π –ø—è—Ç—É—Ö, –Ω–∏—Ö—É—è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏".to_string())
    }
}

#[tokio::test]
async fn test_weather() -> Result<()> {
    let text = "–≠–π –ø—è—Ç—É—à–∞—Ä–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ –ú–∏–Ω—Å–∫?";

    dbg!(get_weather(text).await?);

    Ok(())
}

#[test]
fn system_info() {
    dbg!(APP_VERSION);
}
