use fake::Fake;
use teloxide::{
    ApiError, Bot, RequestError,
    payloads::SendMessageSetters,
    prelude::{Message, Requester, ResponseResult},
    sugar::request::RequestReplyExt,
    types::{InputFile, ParseMode},
    utils::command::BotCommands,
};
use tracing::instrument;

use crate::{
    llm::{LLMClient, petuh::Personality},
    phrases::{kto, vladik_jopoliz},
    responses::list_responses,
    user_extension::UserExtension,
};

#[derive(BotCommands, Debug, Clone)]
#[command(rename_rule = "lowercase", description = r"üêì –ü–µ—Ç—É—à–∏–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")]
pub enum Command {
    #[command(description = "–ü–æ–º–æ—â—å –ø–µ—Ç—É—à–∞—Ä—ã.")]
    Help,
    #[command(description = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")]
    K,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –ê–ª–µ–Ω–µ. üêì")]
    A,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –ú–∞–∫—Å–∏–º—É. üêì")]
    M,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –†–æ–º–µ. üêì")]
    R,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –í–ª–∞–¥–∏–∫—É. üêìüêì")]
    V,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –í–ª–∞–¥–∏–∫—É 2. üêìüêìüêìüêì")]
    J,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –í–ª–∞–¥–∞—Å—É.")]
    VS,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –ù–∞—Å—Ç–µ.")]
    N,
    #[command(description = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.")]
    Gm,
    #[command(description = "–£–∑–Ω–∞—Ç—å –∫—Ç–æ –ø–µ—Ç—É—Ö.")]
    Kto,
    #[command(description = "–ë—Ä–æ—Å–∏—Ç—å –ø–µ—Ç—É—à–∏–Ω—ã–π –∫—É–±–∏–∫.")]
    Kub,
    #[command(description = "–†–∞–∑—ä–µ–±–∞—Ç—å.")]
    Rz,
    #[command(description = "–°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤.")]
    Otvet,
    Vladik,
}

#[instrument]
pub async fn handle_command(bot: Bot, msg: Message, cmd: Command) -> ResponseResult<()> {
    dbg!(&msg);

    if let Some(ref user) = msg.from {
        user.set_last_message_timepestamp(&msg.chat.id)
            .map_err(|err| RequestError::Api(ApiError::Unknown(err.to_string())))?;
    }

    if (0..15).fake::<u32>() == 5 {
        bot.send_animation(
            msg.chat.id,
            InputFile::file_id(
                "CgACAgIAAyEFAASIlB1pAAEBW3Jn95C0FYLjR1ttXMGad8DtIkPSIQACSVgAAtq2yUpGoSZCA0YzmjYE".into(),
            ),
        )
        .reply_to(msg.id)
        .await?;
        return Ok(());
    }

    match cmd {
        Command::Help => {
            bot.send_message(msg.chat.id, Command::descriptions().to_string()).await?;
        }
        Command::K => {
            bot.send_message(
                msg.chat.id,
                "–ö—É–∫–∞—Ä–µ–∫—É—É—É—É —è –ø–µ—Ç—É—à–∞—Ä–∞!!! –Ø –∫—É–∫–æ—Ä–µ–∫–æ—é —è–∫ –ø—è—Ç—É—Ö üêì. –ö–æ–∫",
            )
            .await?;
        }
        Command::M => {
            bot.send_message(msg.chat.id, "–ú–∞–∫—Å–∏–º –ü—è—Ç—É—à–∞—Ä–∞!!!! üêìüêìüêìüêìüêì").await?;
        }
        Command::R => {
            bot.send_message(msg.chat.id, "üêì–†–æ–º–∞üêì –∫–∞–±–ª—É–∫ –ø–µ—Ç—É—à–∏–Ω—ã–π üë†").await?;
        }
        Command::Gm => {
            let morning = LLMClient::request(
                Personality::Zyl,
                "–ó—É–ª, –Ω–∞–ø–∏—à–∏ –æ—á–µ–Ω—å –¥–æ–±—Ä–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º, —Å —Ç–µ–ø–ª–æ–º –∏ –ø–æ–∑–∏—Ç–∏–≤–æ–º, –ø–æ–∂–µ–ª–∞–π –≤—Å–µ–º \
                 —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è. –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Å–µ—Ä–¥–µ—á–µ–∫ –∏ –ø–µ—Ç—É—Ö–æ–≤. –ù–æ –≤—Å–µ —Ä–∞–≤–Ω–æ \
                 –ø–æ–¥ –∫–æ–Ω–µ—Ü —Å–∫–∞–∂–∏ —á—Ç–æ –Ω–∏–±—É–¥—å –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–µ.",
            )
            .await
            .expect("Failed to gm");

            bot.send_message(msg.chat.id, morning).await?;
        }
        Command::Kto => {
            bot.send_message(msg.chat.id, kto()).await?;
        }
        Command::Kub => {
            bot.send_dice(msg.chat.id).await?;
        }
        Command::Rz => {
            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBW3Jn95C0FYLjR1ttXMGad8DtIkPSIQACSVgAAtq2yUpGoSZCA0YzmjYE".into(),
                ),
            )
            .reply_to(msg.id)
            .await?;
        }
        Command::Vladik => {
            let user_id = 1_302_643_454;
            let message = format!("–≠—Ç–æ –≤–µ–ª–∏–∫–∏–π –ø—è—Ç—É—à–∞—Ä–∞ - <a href=\"tg://user?id={user_id}\">–ü—è—Ç—É—Ö!!!</a>!",);

            bot.send_message(msg.chat.id, message).parse_mode(ParseMode::Html).await?;
        }
        Command::V => {
            bot.send_message(msg.chat.id, "@blvcklawyer üêì!! –¢—ã —á–µ –∞—Ö—É–µ–ª??!!!").await?;

            bot.send_sticker(
                msg.chat.id,
                InputFile::file_id(
                    "CAACAgIAAyEFAASIlB1pAAEBYNFn_iIqy0BjM-b3xUwvtxoYkpDWgQACcGAAAmh_cUkNpnr54Lr50TYE".into(),
                ),
            )
            .await?;

            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBeSBoHgSeyVZW8QWT4g-O5z4urDL1QwACqXIAAj-O8EidWMzkpLfNWDYE".into(),
                ),
            )
            .await?;

            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBeR5oHgP87elHbOfzEmHL6OS6Ehs6NwAC-moAAnfz8EjrSFgCXzoEujYE".into(),
                ),
            )
            .await?;

            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBeR1oHgNpLi9JjdvGyQYi58R1K5SKowAC9GoAAnfz8EgtCn1BYGHvhTYE".into(),
                ),
            )
            .await?;
        }

        Command::VS => {
            bot.send_message(msg.chat.id, "–í–ª–∞–¥–∞—Å –ø–µ—Ç—É—Ö —Å—Ü–∞–Ω—ã–π üêì").await?;
        }
        Command::N => {
            bot.send_message(msg.chat.id, "–ù–∞—Å—Ç—è –ø—è—Ç—É—Ö üêì").await?;
        }
        Command::A => {
            bot.send_message(msg.chat.id, "–ê–ª–µ–Ω–∞ –ø—è—Ç—É—Ö !!! üêìüêìüêìüêìüêìüêìüêìüêìüêìüêìüêì").await?;
            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAxkBAAIXDWhJOHImiHv4j1Q5TorZFGdfqUw7AAJ7ggACgXBJSgM0dD0qhhVZNgQ".into(),
                ),
            )
            .await?;
            bot.send_message(
                msg.chat.id,
                "–°–ª—É—à–∞–π, –ê–ª–µ–Ω–∞ üêì. –ü–æ—Ä–∞ —Ç–µ–±–µ –≤–∞–ª–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–≤–æ–π –∫—É—Ä—è—Ç–Ω–∏–∫. –¢–∞–º —Ç–≤–æ–∏ –ø–µ—Ç—É—à–∞—Ä—ã –∂–¥—É—Ç. –ß–µ–≥–æ \
                 —Ç—ã —Ç—É—Ç –º–æ—Ç–∞–µ—à—å—Å—è? –ó–∞–Ω–∏–º–∞–π—Å—è —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏.",
            )
            .await?;
        }
        Command::J => {
            bot.send_message(msg.chat.id, vladik_jopoliz()).await?;
        }
        Command::Otvet => {
            list_responses(msg.chat.id, bot)
                .await
                .map_err(|err| RequestError::Api(ApiError::Unknown(err.to_string())))?;
        }
    }
    Ok(())
}
