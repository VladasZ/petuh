use fake::Fake;
use rand::prelude::IndexedRandom;
use teloxide::{
    ApiError, Bot, RequestError,
    prelude::{Request, Requester},
    requests::ResponseResult,
    sugar::request::RequestReplyExt,
    types::{InputFile, MediaKind, Message, MessageKind, ReactionType},
};
use tracing::instrument;

use crate::{
    APP_VERSION, PETUHI,
    llm::{LLMClient, petuh::Personality},
    responses::{add_response, check_and_respond, contains_add_response_query},
    weather::get_weather,
    yayko::yayko_strike,
};

const O4KO_STRENGTH: u32 = 40;
const COMMENT_PROBABILITY: u32 = 80;
const SHUT_UP_PROBABILITY: u32 = 110;
const REACTION_PROBABILITY: u32 = 30;

#[instrument]
pub async fn handle_text(bot: Bot, msg: Message) -> ResponseResult<()> {
    const REACTIONS: &[&str] = &["ü§°", "üî•", "üíØ", "üíä", "ü§Æ", "ü§©", "üëè", "üí©"];

    dbg!(&msg);

    if (0..REACTION_PROBABILITY).fake::<u32>() == 0 {
        let mut reaction = bot.set_message_reaction(msg.chat.id, msg.id);

        let emoji = REACTIONS.choose(&mut rand::rng()).unwrap();

        reaction.reaction = Some(vec![ReactionType::Emoji {
            emoji: (*emoji).to_string(),
        }]);

        reaction.send().await?;
    }

    if (0..SHUT_UP_PROBABILITY).fake::<u32>() == 5 {
        bot.send_sticker(
            msg.chat.id,
            InputFile::file_id(
                "CAACAgIAAxkBAAIRX2g4zKi0qtqmsZX-QPKaN-p0czM2AAJZeAACbdzISWfvVJ7Ij4tfNgQ".into(),
            ),
        )
        .reply_to(msg.id)
        .await?;

        return Ok(());
    }

    if (0..COMMENT_PROBABILITY).fake::<u32>() == 5 {
        bot.send_animation(
            msg.chat.id,
            InputFile::file_id(
                "CgACAgIAAyEFAASIlB1pAAEBW3Jn95C0FYLjR1ttXMGad8DtIkPSIQACSVgAAtq2yUpGoSZCA0YzmjYE".into(),
            ),
        )
        .reply_to(msg.id)
        .await?;
        return Ok(());
    }

    check_and_respond(msg.text().unwrap_or_default(), msg.chat.id, &bot)
        .await
        .map_err(|err| RequestError::Api(ApiError::Unknown(err.to_string())))?;

    if let MessageKind::Common(ref common_message) = msg.kind
        && let MediaKind::Sticker(sticker) = &common_message.media_kind
        && sticker.sticker.file.unique_id == "AgADl14AAqISEEs".into()
    {
        bot.send_message(msg.chat.id, "@maxon8871 !! –ù—É —Ç—ã –∏ –ø–µ—Ç—É—Ö!!! üêìüêì").await?;
    }

    if let Some(text) = msg.text() {
        let text = text.to_lowercase();

        if contains_add_response_query(&text) {
            add_response(&text, msg.chat.id, bot)
                .await
                .map_err(|err| RequestError::Api(ApiError::Unknown(err.to_string())))?;
            return Ok(());
        }

        if text.contains("—è —Ç—É–ø–æ–π –ø—è—Ç—É—Ö") {
            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgQAAyEFAASIlB1pAAEBWKZn9kmLfI2kj6gd4nMKqouqoDMW1gACowIAAij8FFPkdVtUyi5cBTYE".into(),
                ),
            )
            .reply_to(msg.id)
            .await?;

            return Ok(());
        }

        if text.starts_with("—Ö—É—è—Ä—é —è–π—Ü–æ–º") {
            let result = yayko_strike(bot.clone(), msg.clone()).await.map_err(|e| {
                dbg!(&e);
                RequestError::Api(ApiError::CantParseUrl)
            });

            if let Err(err) = result {
                bot.send_message(msg.chat.id, format!("–Ø –æ–±–æ—Å—Ä–∞–ª—Å—è: {err:?}")).await?;
            }

            return Ok(());
        }

        if text.starts_with("–¥–µ–Ω–∏—Å, ") {
            let text = text.strip_prefix("–¥–µ–Ω–∏—Å, ").unwrap();

            bot.send_message(
                msg.chat.id,
                format!(
                    "–î–µ–Ω–∏—Å:\n{}",
                    LLMClient::request(Personality::Denis, text).await.unwrap()
                ),
            )
            .await?;

            if (0..O4KO_STRENGTH).fake::<u32>() == 5 {
                bot.send_message(
                    msg.chat.id,
                    LLMClient::request(
                        Personality::Denis,
                        "–Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –±—É–¥—Ç–æ —É —Ç–µ–±—è —Å–≥–æ—Ä–µ–ª–∞ –∂–æ–ø–∞ –∏ —Ç—ã —É—Ö–æ–¥–∏—à—å –∏–∑ —á–∞—Ç–∞ –∏ –ø–ª–µ–≤–∞–ª –Ω–∞ \
                         –≤—Å–µ—Ö –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    )
                    .await
                    .unwrap(),
                )
                .await?;
                bot.leave_chat(msg.chat.id).await?;
            }

            return Ok(());
        }

        if text.starts_with("–ø—è—Ç—É—Ö, ") {
            let text = text.strip_prefix("–ø—è—Ç—É—Ö, ").unwrap();

            bot.send_message(
                msg.chat.id,
                format!(
                    "–ü—è—Ç—É—Ö:\n{}",
                    LLMClient::request(Personality::Petuh, text).await.unwrap()
                ),
            )
            .await?;

            return Ok(());
        }

        if text.starts_with("–∑—É–ª, ") {
            bot.send_message(
                msg.chat.id,
                format!(
                    "–ó—É–ª:\n{}",
                    LLMClient::request(
                        Personality::Zyl,
                        text.strip_prefix("–∑—É–ª, ").expect("Failed to strip zyl")
                    )
                    .await
                    .unwrap()
                ),
            )
            .await?;

            if (0..O4KO_STRENGTH).fake::<u32>() == 5 {
                bot.send_message(
                    msg.chat.id,
                    LLMClient::request(
                        Personality::Zyl,
                        "–Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –±—É–¥—Ç–æ —É —Ç–µ–±—è —Å–≥–æ—Ä–µ–ª–∞ –∂–æ–ø–∞ –∏ —Ç—ã —É—Ö–æ–¥–∏—à—å –∏–∑ —á–∞—Ç–∞ –∏ –ø–ª–µ–≤–∞–ª –Ω–∞ \
                         –≤—Å–µ—Ö –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    )
                    .await
                    .unwrap(),
                )
                .await?;
                bot.leave_chat(msg.chat.id).await?;
            }

            return Ok(());
        }

        if text.contains("--version") || text.contains("-v") {
            bot.send_message(
                msg.chat.id,
                format!(
                    r"
–ö—É—Ä—è—Ç–Ω–∏–∫ v{APP_VERSION}

–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {COMMENT_PROBABILITY}
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: {REACTION_PROBABILITY}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ç—É—Ö–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è:
- –î–µ–Ω–∏—Å: –°—Ç–æ–π–∫–æ—Å—Ç—å –æ—á–∫–∞: {O4KO_STRENGTH}
- –ó—É–ª: –°—Ç–æ–π–∫–æ—Å—Ç—å –æ—á–∫–∞: {O4KO_STRENGTH}
- –ü—è—Ç—É—Ö: –°—Ç–æ–π–∫–æ—Å—Ç—å –æ—á–∫–∞: –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç

–°–ø–∏—Å–æ–∫ –ø–µ—Ç—É—Ö–æ–≤:
{}

(–í–ª–∞–¥–∏–∫ –ü—è—Ç—É—à–∞—Ä–∞ –í–∞–Ω—é—á—ã)
",
                    PETUHI.join("\n"),
                ),
            )
            .await?;
        }

        if text.contains("–ø–æ–≥–æ–¥–∞") {
            let weather = get_weather(&text).await.unwrap();
            bot.send_message(msg.chat.id, weather).await?;
        }

        if text == "–ö—Ç–æ –ø–µ—Ç—É—Ö?" {
            let name = PETUHI.choose(&mut rand::rng()).unwrap();
            let reply = format!("{name} ‚Äî –ø–µ—Ç—É—Ö! üêì");
            bot.send_message(msg.chat.id, reply).await?;
        }
    }
    Ok(())
}
