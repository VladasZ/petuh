#![allow(unreachable_code)]

mod chat_gpt;
mod phrases;
mod yayko;

use anyhow::Result;
use fake::Fake;
use rand::prelude::SliceRandom;
use reqwest::Client;
use serde::Deserialize;
use teloxide::{
    ApiError, RequestError,
    prelude::*,
    sugar::request::RequestReplyExt,
    types::{InputFile, MediaKind, Message, MessageKind, ParseMode, ReactionType},
    utils::command::BotCommands,
};
use whoami::fallible;

use crate::{
    chat_gpt::{query_denis, query_petuh, query_zul},
    yayko::yayko_strike,
};

pub const APP_VERSION: &str = env!("CARGO_PKG_VERSION");

const PETUHI: &[&str] = &[
    "–ú–∞–∫—Å–∏–º",
    "–í–ª–∞–¥–∏–∫",
    "–í–ª–∞–¥–∞—Å",
    "–†–æ–º–∞",
    "–ù–∞—Å—Ç—è",
    "–î–µ–Ω–∏—Å",
    "–ê–ª—ë–Ω–∞",
    "–í–∏—Ç—ë–∫",
];
const MORNING: &[&str] = &[
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –ø–µ—Ç—É—à–∞—Ä—ã –µ–±–∞–Ω—ã–µ! üêì",
    "–î–µ–Ω—å –Ω–∞—á–∞–ª—Å—è, –∞ –≤—ã, –±–ª—è–¥—å, –≤—Å—ë –µ—â—ë –≤ —Å–≤–æ–∏—Ö –æ–±–æ—Å—Å–∞–Ω–Ω—ã—Ö –∫—É—Ä—è—Ç–Ω–∏–∫–∞—Ö –ª–µ–∂–∏—Ç–µ! üõèÔ∏èüêì",
    "–í—Å—Ç–∞–≤–∞–π—Ç–µ, –∫—É–∫–∞—Ä–µ–∫–∞—é—â–∏–µ –ø–æ–∑–æ—Ä–∏—â–∞, –≤–∞—Å —É–∂–µ –∂–¥—É—Ç –¥–µ–ª–∞ ‚Äî –Ω–∏—Ö—É—è –Ω–µ –≤–∞–∂–Ω—ã–µ! üìÖüñï",
    "–î–æ–±—Ä–µ–π—à–µ–≥–æ –≤–∞–º —É—Ç—Ä–∞, –ø–µ—Ç—É—à–∏–Ω–∞—è –±—Ä–∞—Ç–≤–∞, —á—ë, —Å–Ω–æ–≤–∞ –Ω–æ—á—å –ø—Ä–æ–µ–±–∞–ª–∏? üêìüò¥",
    "–ê –Ω—É –±—ã—Å—Ç—Ä–æ –ø–æ–¥–Ω—è–ª–∏—Å—å, –ø–µ—Ç—É—à–∏–Ω—ã–µ –Ω–µ—É–¥–∞—á–∏ –ø—Ä–∏—Ä–æ–¥—ã, –ø–æ—Ä–∞ –ø–æ–∑–æ—Ä–∏—Ç—å —Å–µ–±—è –¥–∞–ª—å—à–µ! üêîüî™",
    "–°–æ–ª–Ω—ã—à–∫–æ –≤—Å—Ç–∞–ª–æ ‚Äî –∏ –≤—ã, —É–µ–±–∞–Ω—ã, —Ç–æ–∂–µ –¥–∞–≤–∞–π—Ç–µ, —Ö–≤–∞—Ç–∏—Ç —Ç—É—Ö–Ω—É—Ç—å! üåÖü•Ñ",
    "–ü—Ä–∏–≤–µ—Ç, –∫—Ä—ã–ª–∞—Ç—ã–µ —É–µ–±–∞–Ω—ã, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–≤—ã–º –æ–ø–æ–∑–æ—Ä–∏—Ç—Å—è –≤ —á–∞—Ç–∏–∫–µ? üêìüì±",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ø–µ—Ç—É—à–∏–Ω–∞—è –ø–æ–º–æ–π–∫–∞, –∫—Ç–æ –æ–ø—è—Ç—å –ø—Ä–æ—Å–Ω—É–ª—Å—è, —á—Ç–æ–±—ã –≤–æ–Ω—è—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç? üêìüßº‚ùå",
    "–ü–æ–¥—ä—ë–º, –ø–µ—Ç—É—à–∏–Ω–æ–µ –ø—Ä–æ–∫–ª—è—Ç—å–µ, –æ–ø—è—Ç—å –±—É–¥–µ—Ç–µ –Ω–µ—Å—Ç–∏ —Å–≤–æ—ë –µ–±–∞–Ω–æ–µ –º–Ω–µ–Ω–∏–µ, –Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ–µ? üì¢üß†‚ùå",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —á—É—á–µ–ª–æ —Å –∫–ª—é–≤–æ–º. üêìüìâ",
    "–£—Ç—Ä–æ, —Å—É–∫–∞, –Ω–∞—Å—Ç–∞–ª–æ, –∞ —Ç—ã –æ–ø—è—Ç—å –∂–∏–≤–æ–π ‚Äî –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–≤–æ–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏! üí©üêì",
    "–ö—É–∫–∞—Ä–µ–∫, –±–ª—è–¥—å.",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ø–µ—Ç—É—à–∞—Ä–∞ –æ–±–æ—Å—Å–∞–Ω–Ω—ã–π, —Å–Ω–æ–≤–∞ –∫—É–∫–∞—Ä–µ–∫–∞–µ—à—å –≤ –ø—É—Å—Ç–æ—Ç—É, –∫–∞–∫ –±—É–¥—Ç–æ –∫–æ–º—É-—Ç–æ –Ω–µ –ø–æ—Ö—É–π? üêìüñï",
    "–û—á–Ω—É–ª—Å—è, –ø–∏–¥–æ—Ä–∞—Å –ø–µ—Ä–Ω–∞—Ç—ã–π? –ò–¥–∏ —Å–Ω–æ–≤–∞ –ø–æ–∑–æ—Ä—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å–≤–æ–∏–º –¥—ã—Ö–∞–Ω–∏–µ–º. üß¨üêî",
    "–ü—Ä–∏–≤–µ—Ç, –ø–µ—Ç—É—à–∏–Ω–æ–µ –Ω–∏—á—Ç–æ–∂–µ—Å—Ç–≤–æ, —Ç—ã –¥–∞–∂–µ –≤ –∫—É—Ä—è—Ç–Ω–∏–∫–µ ‚Äî –ø–æ–∑–æ—Ä–Ω—ã–π –∏–∑–≥–æ–π. üêìüö´",
    "–í—Å—Ç–∞–≤–∞–π—Ç–µ, –ø–∏–¥–æ—Ä—ã –≤ –ø–µ—Ä—å—è—Ö, —Å–µ–≥–æ–¥–Ω—è –≤–∞–º —Å–Ω–æ–≤–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–¥. üñïüêî",
    "–ï—â—ë –æ–¥–∏–Ω –¥–µ–Ω—å, –µ—â—ë –æ–¥–∏–Ω —à–∞–Ω—Å –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ç—É—à–∏–Ω—ã–π —É–µ–±–æ–∫ –≤—Å–µ–π –ø–ª–∞–Ω–µ—Ç—ã. üåçüêì",
    "–ü–æ–¥—ä—ë–º, –≥–Ω–æ–π–Ω—ã–π –ø–µ—Ç—É—à–∞—Ä–∞, —Ç–≤–æ—ë –∫—É–∫–∞—Ä–µ–∫–∞–Ω—å–µ ‚Äî –ø—ã—Ç–∫–∞ –¥–∞–∂–µ –¥–ª—è —Å–∞—Ç–∞–Ω—ã. üî•üêî",
    "–û, —ç—Ç–æ —Ç—ã, –ø–∏–¥–∞—Ä–∞—Å —Å –∫–ª—é–≤–æ–º, –Ω–∞—Ö—É—è —Ç—ã –æ–ø—è—Ç—å –ø—Ä–æ—Å–Ω—É–ª—Å—è? üò°üê£",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —á—É—á–µ–ª–æ –ø–∏–¥–æ—Ä—Å–∫–æ–µ, —Å–Ω–æ–≤–∞ –±—É–¥–µ—à—å –Ω–µ—Å—Ç–∏ —Ö—É–π–Ω—é –≤ —á–∞—Ç–∏–∫–µ? üí¨üêì",
    "–ü–æ–¥—ä—ë–º, –ø–µ—Ç—É—à–∏–Ω–æ–µ —á–º–æ. ü™¶üêì",
    "–≠–π, –∫—Ä—ã–ª–∞—Ç—ã–π –¥–µ–≥–µ–Ω–µ—Ä–∞—Ç, —Ö–≤–∞—Ç–∏—Ç –ø–µ—Ä–¥–µ—Ç—å –≤–æ —Å–Ω–µ, –Ω–∞—á–Ω–∏ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ. üí®üò§",
    "–í—Å—Ç–∞–≤–∞–π, –ø–∏–¥–æ—Ä–∞—Å",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ø—ã–ª—å –ø–µ—Ç—É—à–∏–Ω–∞—è, –∫–∞–∫ —Ç–∞–º —Ç–≤–æ—è –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å? üßπüêî",
    "–í—Å—Ç–∞–≤–∞–π, –ø–æ–∑–æ—Ä —Ä–æ–¥–∞ –ø–µ—Ç—É—à–∏–Ω–æ–≥–æ, —Ç–≤–æ–π IQ –≤—Å—ë –µ—â—ë –Ω–∏–∂–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç—Ä—É–ø–∞ —Ç–≤–æ–µ–π –º–∞–º–∫–∏. üßäüß†",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ø–µ—Ç—É—à–∏–Ω—ã–π –≤—ã–∫–∏–¥—ã—à üê£üî™, —Ç–≤–æ—è –º–∞—Ç—å –∂–∞–ª–µ–µ—Ç, —á—Ç–æ –Ω–µ –ø–µ—Ä–µ—Ç–æ–ø—Ç–∞–ª–∞ —è–π—Ü–∞ ü•öü™ì.",
    "–í—Å—Ç–∞–≤–∞–π, —É—ë–±–æ–∫ –≤—Å–µ–ª–µ–Ω—Å–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞ üí©üåå, –º–∏—Ä—É –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ –µ—â—ë –æ–¥–Ω–æ–≥–æ –∫—É—Å–∫–∞ –¥–µ—Ä—å–º–∞ —Å –ø–µ—Ä—å—è–º–∏ üêì.",
    "–í—Å—Ç–∞–≤–∞–π, –≥–Ω–æ–π–Ω—ã–π —É—ë–±–æ–∫ üßüüíÄ, —Ç–≤–æ—è –∂–∏–∑–Ω—å ‚Äî —ç—Ç–æ –∞–Ω–µ–∫–¥–æ—Ç, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –¥–∞–∂–µ –∫–ª–æ—É–Ω –Ω–µ —Å–º–µ—ë—Ç—Å—è üî•ü§°.",
    "–ü—Ä–∏–≤–µ—Ç, –ø–µ—Ç—É—à–∞—Ä–∞ –±–µ—Å—Ç–æ–ª–∫–æ–≤—ã–π üêìüôÑ",
    "–ü–æ–¥—ä—ë–º, –∫—É–∫–∞—Ä–µ–∫–∞—é—â–µ–µ —á—å–º–æ üì¢üêì",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Ç—ã —ë–±–∞–Ω–∞—è –ø–µ—Ç—É—à–∏–Ω–∞—è –º—Ä–∞–∑—å üêìüëä, –∫–∞–∫ —Ç–∞–º —Ç–≤–æ—è –±–æ—Ä—å–±–∞ —Å–æ –∑–¥—Ä–∞–≤—ã–∏ —Å–º—ã—Å–ª–æ–º? üå¨Ô∏è‚ùå.",
    "–û—á–Ω—É–ª—Å—è, –æ–±–∏–∂–µ–Ω–Ω—ã–π –ø–æ–¥ –ø–æ–¥—É—à–∫–æ–π? üõèÔ∏èüêî –°–µ–≥–æ–¥–Ω—è —Å–Ω–æ–≤–∞ —Ç–µ–±—è –Ω–∞—Ö—É–π –Ω–∏–∫—Ç–æ –Ω–µ –∑–≤–∞–ª.",
    "–≠–π, –ø–∞–¥–∞–ª—å –ø–µ—Ä–Ω–∞—Ç–∞—è üíÄüêî, –∂–æ–ø—É –æ—Ç –Ω–∞—Ä –æ—Ç–æ—Ä–≤–∏ ‚Äî –ø–∞—Ä–∞—à–∞ —Å–æ—Å–∫—É—á–∏–ª–∞—Å—å.",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ø–µ—Ç—É—à–∏–Ω–∞—è —à–µ—Ä—Å—Ç—å üêìüßº, –∏–¥–∏ –ø–æ–∫—É–∫–∞—Ä–µ–∫–∞–π –≤ —É–≥–æ–ª ‚Äî –º–æ–∂–µ—Ç, —Ç–∞–º –∫–æ–º—É-—Ç–æ –Ω–µ –ø–æ—Ö—É–π.",
    "–û—á–Ω–∏—Å—å, –ø–µ—Ä–Ω–∞—Ç—ã–π –≤—ã–±–ª—è–¥–æ–∫ üê£üöΩ",
    "–í—Å—Ç–∞–≤–∞–π, —É–µ–±–∞–Ω –æ–±–æ—Å—Ü–∞–Ω–Ω—ã–π ü™ëüêî, —Ç—ã –≤ —ç—Ç–æ–º —Ü–∏—Ä–∫–µ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–æ—É–Ω –±–µ–∑ –Ω–æ—Å–∞.",
];

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = r"üêì –ü–µ—Ç—É—à–∏–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")]
enum Command {
    #[command(description = "–ü–æ–º–æ—â—å –ø–µ—Ç—É—à–∞—Ä—ã.")]
    Help,
    #[command(description = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")]
    K,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –ê–ª–µ–Ω–µ.")]
    A,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –ú–∞–∫—Å–∏–º—É.")]
    M,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –†–æ–º–µ.")]
    R,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –í–ª–∞–¥–∏–∫—É.")]
    V,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –í–ª–∞–¥–∞—Å—É.")]
    VS,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –ù–∞—Å—Ç–µ.")]
    N,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –î–µ–Ω–∏—Å—É.")]
    D,
    #[command(description = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.")]
    Gm,
    #[command(description = "–£–∑–Ω–∞—Ç—å –∫—Ç–æ –ø–µ—Ç—É—Ö.")]
    Kto,
    #[command(description = "–ë—Ä–æ—Å–∏—Ç—å –ø–µ—Ç—É—à–∏–Ω—ã–π –∫—É–±–∏–∫.")]
    Kub,
    #[command(description = "–†–∞–∑—ä–µ–±–∞—Ç—å.")]
    Rz,
    Vladik,
}

const O4KO_STRENGTH: u32 = 28;
const COMMENT_PROBABILITY: u32 = 50;
const SHUT_UP_PROBABILITY: u32 = 80;
const REACTION_PROBABILITY: u32 = 20;

async fn handle_command(bot: Bot, msg: Message, cmd: Command) -> ResponseResult<()> {
    dbg!(&msg);

    if (0..15).fake::<u32>() == 5 {
        bot.send_animation(
            msg.chat.id,
            InputFile::file_id(
                "CgACAgIAAyEFAASIlB1pAAEBW3Jn95C0FYLjR1ttXMGad8DtIkPSIQACSVgAAtq2yUpGoSZCA0YzmjYE",
            ),
        )
        .reply_to(msg.id)
        .await?;
        return Ok(());
    }

    match cmd {
        Command::Help => {
            bot.send_message(msg.chat.id, Command::descriptions().to_string()).await?;
        }
        Command::K => {
            bot.send_message(
                msg.chat.id,
                "–ö—É–∫–∞—Ä–µ–∫—É—É—É—É —è –ø–µ—Ç—É—à–∞—Ä–∞!!! –Ø –∫—É–∫–æ—Ä–µ–∫–æ—é —è–∫ –ø—è—Ç—É—Ö üêì. –ö–æ–∫",
            )
            .await?;
        }
        Command::M => {
            bot.send_message(msg.chat.id, "–ú–∞–∫—Å–∏–º –ü—è—Ç—É—à–∞—Ä–∞!!!! üêìüêìüêìüêìüêì").await?;
        }
        Command::R => {
            bot.send_message(msg.chat.id, "–†–æ–º–∞ –∫–∞–±–ª—É–∫ –ø–µ—Ç—É—à–∏–Ω—ã–π üë†").await?;
        }
        Command::Gm => {
            let morning = MORNING.choose(&mut rand::thread_rng()).unwrap();

            bot.send_message(msg.chat.id, *morning).await?;
        }
        Command::Kto => {
            let name = PETUHI.choose(&mut rand::thread_rng()).unwrap();
            let reply = format!("{name} ‚Äî –ø–µ—Ç—É—Ö! üêì");
            bot.send_message(msg.chat.id, reply).await?;
        }
        Command::Kub => {
            bot.send_dice(msg.chat.id).await?;
        }
        Command::Rz => {
            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBW3Jn95C0FYLjR1ttXMGad8DtIkPSIQACSVgAAtq2yUpGoSZCA0YzmjYE",
                ),
            )
            .reply_to(msg.id)
            .await?;
        }
        Command::Vladik => {
            let user_id = 1302643454; // Replace with actual user ID
            let message = format!(
                "–≠—Ç–æ –≤–µ–ª–∏–∫–∏–π –ø—è—Ç—É—à–∞—Ä–∞ - <a href=\"tg://user?id={}\">–ü—è—Ç—É—Ö!!!</a>!",
                user_id
            );

            bot.send_message(msg.chat.id, message).parse_mode(ParseMode::Html).await?;
        }
        Command::V => {
            bot.send_message(msg.chat.id, "@blvcklawyer !! –¢—ã —á–µ –∞—Ö—É–µ–ª??!!!").await?;

            bot.send_sticker(
                msg.chat.id,
                InputFile::file_id(
                    "CAACAgIAAyEFAASIlB1pAAEBYNFn_iIqy0BjM-b3xUwvtxoYkpDWgQACcGAAAmh_cUkNpnr54Lr50TYE",
                ),
            )
            .await?;

            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBeSBoHgSeyVZW8QWT4g-O5z4urDL1QwACqXIAAj-O8EidWMzkpLfNWDYE",
                ),
            )
            .await?;

            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBeR5oHgP87elHbOfzEmHL6OS6Ehs6NwAC-moAAnfz8EjrSFgCXzoEujYE",
                ),
            )
            .await?;

            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgIAAyEFAASIlB1pAAEBeR1oHgNpLi9JjdvGyQYi58R1K5SKowAC9GoAAnfz8EgtCn1BYGHvhTYE",
                ),
            )
            .await?;
        }
        Command::D => {
            bot.send_sticker(
                msg.chat.id,
                InputFile::file_id(
                    "CAACAgIAAx0CctKdnAACsWBoGLtHnaEy0-Qy8rC0lMUmA520CwACUWMAAhH3wUqv_Bq7iSTS3jYE",
                ),
            )
            .await?;

            bot.send_sticker(
                msg.chat.id,
                InputFile::file_id(
                    "CAACAgIAAyEFAASIlB1pAAEBYNFn_iIqy0BjM-b3xUwvtxoYkpDWgQACcGAAAmh_cUkNpnr54Lr50TYE",
                ),
            )
            .await?;

            bot.send_message(msg.chat.id, "–≤ —Å—Ç–æ–π–ª–æ –ø–æ–¥–∑–µ—Ç–Ω–∏–∫").await?;
            bot.send_message(msg.chat.id, "—Ç–æ–ª—å–∫–æ –∏ –º–æ–∂–µ—à—å —á—Ç–æ —Å—Ä–∞–∫–æ–π –∏—Ö —Å–ø–µ—Ä–º—É –ª–æ–≤–∏—Ç—å")
                .await?;
        }
        Command::VS => {
            bot.send_message(msg.chat.id, "–í–ª–∞–¥–∞—Å –ø–µ—Ç—É—Ö —Å—Ü–∞–Ω—ã–π üêì").await?;
        }
        Command::N => {
            bot.send_message(msg.chat.id, "–ù–∞—Å—Ç—è –ø—è—Ç—É—Ö üêì").await?;
        }
        Command::A => {
            bot.send_message(msg.chat.id, "–ê–ª–µ–Ω–∞ –ø—è—Ç—É—Ö !!! üêìüêìüêìüêìüêìüêìüêìüêìüêìüêìüêì").await?;
            bot.send_animation(
                msg.chat.id,
                InputFile::file_id("CgACAgIAAxkBAAIXDWhJOHImiHv4j1Q5TorZFGdfqUw7AAJ7ggACgXBJSgM0dD0qhhVZNgQ"),
            )
            .await?;
            bot.send_message(msg.chat.id, "–°–ª—É—à–∞–π, –ê–ª–µ–Ω–∞. –ü–æ—Ä–∞ —Ç–µ–±–µ –≤–∞–ª–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–≤–æ–π –∫—É—Ä—è—Ç–Ω–∏–∫. –¢–∞–º —Ç–≤–æ–∏ –ø–µ—Ç—É—à–∞—Ä—ã –∂–¥—É—Ç. –ß–µ–≥–æ —Ç—ã —Ç—É—Ç –º–æ—Ç–∞–µ—à—å—Å—è? –ó–∞–Ω–∏–º–∞–π—Å—è —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏.").await?;
        }
    }
    Ok(())
}

async fn handle_text(bot: Bot, msg: Message) -> ResponseResult<()> {
    dbg!(&msg);

    if (0..REACTION_PROBABILITY).fake::<u32>() == 0 {
        let mut reaction = bot.set_message_reaction(msg.chat.id, msg.id);

        const REACTIONS: &[&str] = &["ü§°", "üî•", "üíØ"];

        // "üëç", "üëé", "‚ù§", "üî•", "ü•∞", "üëè", "üòÅ", "ü§î", "ü§Ø", "üò±", "ü§¨", "üò¢", "üéâ",
        // "ü§©", "ü§Æ", "üí©", "üôè", "üëå", "üïä", "ü§°", "ü•±", "ü•¥", "üòç", "üê≥", "‚ù§‚Äçüî•", "üåö",
        // "üå≠", "üíØ", "ü§£", "‚ö°", "üçå", "üèÜ", "üíî", "ü§®", "üòê", "üçì", "üçæ", "üíã", "üñï",
        // "üòà", "üò¥", "üò≠", "ü§ì", "üëª", "üë®‚Äçüíª", "üëÄ", "üéÉ", "üôà", "üòá", "üò®", "ü§ù", "‚úç",
        // "ü§ó", "ü´°", "üéÖ", "üéÑ", "‚òÉ", "üíÖ", "ü§™", "üóø", "üÜí", "üíò", "üôâ", "ü¶Ñ", "üòò",
        // "üíä", "üôä", "üòé", "üëæ", "ü§∑‚Äç‚ôÇ", "ü§∑", "ü§∑‚Äç‚ôÄ", "üò°"

        let emoji = REACTIONS.choose(&mut rand::thread_rng()).unwrap();

        reaction.reaction = Some(vec![ReactionType::Emoji {
            emoji: emoji.to_string(),
        }]);

        reaction.send().await?;
    }

    if (0..SHUT_UP_PROBABILITY).fake::<u32>() == 5 {
        bot.send_sticker(
            msg.chat.id,
            InputFile::file_id("CAACAgIAAxkBAAIRX2g4zKi0qtqmsZX-QPKaN-p0czM2AAJZeAACbdzISWfvVJ7Ij4tfNgQ"),
        )
        .reply_to(msg.id)
        .await?;

        return Ok(());
    }

    if (0..COMMENT_PROBABILITY).fake::<u32>() == 5 {
        bot.send_animation(
            msg.chat.id,
            InputFile::file_id(
                "CgACAgIAAyEFAASIlB1pAAEBW3Jn95C0FYLjR1ttXMGad8DtIkPSIQACSVgAAtq2yUpGoSZCA0YzmjYE",
            ),
        )
        .reply_to(msg.id)
        .await?;
        return Ok(());
    }

    match msg.kind {
        MessageKind::Common(ref common_message) => match &common_message.media_kind {
            MediaKind::Sticker(sticker) => {
                if sticker.sticker.file.unique_id == "AgADl14AAqISEEs" {
                    bot.send_message(msg.chat.id, "@maxon8871 !! –ù—É —Ç—ã –∏ –ø–µ—Ç—É—Ö!!!").await?;
                }
            }
            _ => (),
        },
        _ => (),
    }

    if let Some(text) = msg.text() {
        let text = text.to_lowercase();

        if text.contains("—è —Ç—É–ø–æ–π –ø—è—Ç—É—Ö") {
            bot.send_animation(
                msg.chat.id,
                InputFile::file_id(
                    "CgACAgQAAyEFAASIlB1pAAEBWKZn9kmLfI2kj6gd4nMKqouqoDMW1gACowIAAij8FFPkdVtUyi5cBTYE",
                ),
            )
            .reply_to(msg.id)
            .await?;

            return Ok(());
        }

        if text.starts_with("—Ö—É—è—Ä—é —è–π—Ü–æ–º") || text.starts_with("–•—É—è—Ä—é —è–π—Ü–æ–º") {
            let result = yayko_strike(bot.clone(), msg.clone()).await.map_err(|e| {
                dbg!(&e);
                RequestError::Api(ApiError::CantParseUrl)
            });

            if let Err(err) = result {
                bot.send_message(msg.chat.id, format!("–Ø –æ–±–æ—Å—Ä–∞–ª—Å—è: {:?}", err)).await?;
            }

            return Ok(());
        }

        if text.starts_with("–¥–µ–Ω–∏—Å, ") {
            let text = &text["–¥–µ–Ω–∏—Å, ".len()..];

            bot.send_message(
                msg.chat.id,
                format!("–î–µ–Ω–∏—Å:\n{}", query_denis(&text).await.unwrap()),
            )
            .await?;

            if (0..O4KO_STRENGTH).fake::<u32>() == 5 {
                bot.send_message(
                    msg.chat.id,
                    query_denis(
                        &"–Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –±—É–¥—Ç–æ —É —Ç–µ–±—è —Å–≥–æ—Ä–µ–ª–∞ –∂–æ–ø–∞ –∏ —Ç—ã —É—Ö–æ–¥–∏—à—å –∏–∑ —á–∞—Ç–∞ –∏ –ø–ª–µ–≤–∞–ª –Ω–∞ \
                          –≤—Å–µ—Ö –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    )
                    .await
                    .unwrap(),
                )
                .await?;
                bot.leave_chat(msg.chat.id).await?;
            }

            return Ok(());
        }

        if text.starts_with("–ø—è—Ç—É—Ö, ") {
            let text = &text["–ø—è—Ç—É—Ö, ".len()..];

            bot.send_message(
                msg.chat.id,
                format!("–ü—è—Ç—É—Ö:\n{}", query_petuh(&text).await.unwrap()),
            )
            .await?;

            return Ok(());
        }

        if text.starts_with("–∑—É–ª, ") {
            let text = &text["–∑—É–ª, ".len()..];

            bot.send_message(msg.chat.id, format!("–ó—É–ª:\n{}", query_zul(&text).await.unwrap()))
                .await?;

            if (0..O4KO_STRENGTH).fake::<u32>() == 5 {
                bot.send_message(
                    msg.chat.id,
                    query_zul(
                        &"–Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –±—É–¥—Ç–æ —É —Ç–µ–±—è —Å–≥–æ—Ä–µ–ª–∞ –∂–æ–ø–∞ –∏ —Ç—ã —É—Ö–æ–¥–∏—à—å –∏–∑ —á–∞—Ç–∞ –∏ –ø–ª–µ–≤–∞–ª –Ω–∞ \
                          –≤—Å–µ—Ö –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    )
                    .await
                    .unwrap(),
                )
                .await?;
                bot.leave_chat(msg.chat.id).await?;
            }

            return Ok(());
        }

        if text.contains("--version") || text.contains("-v") {
            bot.send_message(
                msg.chat.id,
                format!(
                    r"
–ö—É—Ä—è—Ç–Ω–∏–∫ v{APP_VERSION}

–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {COMMENT_PROBABILITY}
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: {REACTION_PROBABILITY}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ç—É—Ö–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è:
- –î–µ–Ω–∏—Å: –°—Ç–æ–π–∫–æ—Å—Ç—å –æ—á–∫–∞: {O4KO_STRENGTH}
- –ó—É–ª: –°—Ç–æ–π–∫–æ—Å—Ç—å –æ—á–∫–∞: {O4KO_STRENGTH}
- –ü—è—Ç—É—Ö: –°—Ç–æ–π–∫–æ—Å—Ç—å –æ—á–∫–∞: –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç

–°–ø–∏—Å–æ–∫ –ø–µ—Ç—É—Ö–æ–≤:
{}

–ö—Ä—É—á—É—Å—å —Ç—É—Ç:
{}

(–í–ª–∞–¥–∏–∫ –ü—è—Ç—É—à–∞—Ä–∞ –í–∞–Ω—é—á—ã)
",
                    PETUHI.join("\n"),
                    collect_system_info()
                ),
            )
            .await?;
        }

        if text.contains("–ø–æ–≥–æ–¥–∞") {
            let weather = get_weather(&text).await.unwrap();
            bot.send_message(msg.chat.id, weather).await?;
        }

        if text == "–ö—Ç–æ –ø–µ—Ç—É—Ö?" {
            let name = PETUHI.choose(&mut rand::thread_rng()).unwrap();
            let reply = format!("{name} ‚Äî –ø–µ—Ç—É—Ö! üêì");
            bot.send_message(msg.chat.id, reply).await?;
        }
    }
    Ok(())
}

#[tokio::main]
async fn main() -> Result<()> {
    println!("Hello");

    pretty_env_logger::init();

    dotenv::dotenv().ok();
    log::info!("Starting Telegram bot...");

    let bot = Bot::from_env();

    let handler = dptree::entry()
        .branch(Update::filter_message().filter_command::<Command>().endpoint(handle_command))
        .branch(Update::filter_message().endpoint(handle_text));

    Dispatcher::builder(bot, handler)
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;

    Ok(())
}

#[ignore]
#[tokio::test]
async fn debug() -> Result<()> {
    dotenv::dotenv().ok();
    log::info!("Starting Telegram bot...");

    let bot = Bot::from_env();

    let chat = bot.get_chat(ChatId(1)).await?;

    dbg!(&chat);

    bot.delete_message(ChatId(1), MessageId(1)).await?;

    Ok(())
}

#[derive(Debug, Deserialize)]
struct WeatherResponse {
    weather: Vec<Weather>,
    main: Main,
    name: String,
}

#[derive(Debug, Deserialize)]
struct Weather {
    description: String,
}

#[derive(Debug, Deserialize)]
struct Main {
    temp: f64,
}

async fn get_weather(query: &str) -> Result<String> {
    let city = query.replace('?', "");
    let city = city.split(' ').last().unwrap();

    dbg!(&city);

    dotenv::dotenv()?;

    let client = Client::new();

    let api_key = std::env::var("OPENWEATHER_API_KEY")?;

    let url = format!(
        "https://api.openweathermap.org/data/2.5/weather?q={}&units=metric&lang=ru&appid={}",
        city, api_key
    );

    let response = client.get(&url).send().await?;

    dbg!(&response);

    if response.status().is_success() {
        let data = dbg!(response.json::<WeatherResponse>().await)?;

        let reply = format!(
            "–í –≥–æ—Ä–æ–¥–µ {} –ø–µ—Ç—É—à–∏–Ω–∞—è –ø–æ–≥–æ–¥–∞: {}, {:.1}¬∞C",
            data.name,
            data.weather.first().map_or("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞", |w| w.description.as_str()),
            data.main.temp
        );

        Ok(reply)
    } else {
        Ok("–Ø —Ç—É–ø–æ–π –ø—è—Ç—É—Ö, –Ω–∏—Ö—É—è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏".to_string())
    }
}

#[tokio::test]
async fn test_weather() -> Result<()> {
    let text = "–≠–π –ø—è—Ç—É—à–∞—Ä–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ –ú–∏–Ω—Å–∫?";

    dbg!(get_weather(text).await?);

    Ok(())
}

fn collect_system_info() -> String {
    let mut info = String::new();

    // if let Ok(os_type) = sys_info::os_type() {
    //     info += &format!("OS Type: {}\n", os_type);
    // }
    //
    // if let Ok(os_release) = sys_info::os_release() {
    //     info += &format!("OS Release: {}\n", os_release);
    // }

    let hostname = fallible::hostname().unwrap();
    info += &format!("Hostname: {}\n", hostname);

    if let Ok(uname) = uname::uname() {
        info += &format!("Architecture: {}\n", uname.machine);
        info += &format!("Sysname: {}\n", uname.sysname);
        info += &format!("Nodename: {}\n", uname.nodename);
        info += &format!("Kernel Release: {}\n", uname.release);
        info += &format!("Version: {}\n", uname.version);
    }

    info += &format!("Distro: {}\n", whoami::distro());
    info += &format!("Username: {}\n", whoami::username());
    info += &format!("Desktop Environment: {}\n", whoami::desktop_env());
    info += &format!("Platform: {}\n", whoami::platform());

    info
}

#[test]
fn system_info() {
    println!("{}", &collect_system_info());
}
